Assignment 2: Collaborative Assignment - Level 2
Write a pseudo-code to find the minimum among three given numbers.
Assume that the three numbers are always different. 
Note: You can use the drag and drop option provided below to create the appropriate pseudo-code from the set of statements provided.
Estimated Time: 20 minutes






Pseudo-code Magnets:
Pseudo-code
input Number1,Number2,Number3
if(Number1 < Number2) then
if(Number1 < Number3) then
display "Num1 is the smallest"
else
display "Num3 is the smallest"
end-if
else if(Number2 < Number3) then
display "Num2 is the smallest"
else
display "Num3 is the smallest"
end-if


-----------------------------------------------------------------------------------------------------




#PF-Assgn-19

def calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):
    bill_amount=0
    #write your logic here
    if(food_type=="N"):
        bill_amount=150*quantity_ordered
        if(distance_in_kms>3 and distance_in_kms<7):
            bill_amount=(bill_amount)+((distance_in_kms-3)*3)
        elif(distance_in_kms>6):
            bill_amount=(bill_amount)+(3*3)+((distance_in_kms-6)*6)
    elif(food_type=="V"):
        bill_amount=120*quantity_ordered
        if(distance_in_kms>3 and distance_in_kms<7):
            bill_amount=(bill_amount)+((distance_in_kms-3)*3)
        elif(distance_in_kms>6):
            bill_amount=(bill_amount)+(3*3)+((distance_in_kms-6)*6)
    if((food_type!="N" and food_type!="V") or quantity_ordered<1 or distance_in_kms<=0):
        bill_amount=-1
    return bill_amount

#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program
bill_amount=calculate_bill_amount("N",2,7)
print(bill_amount)


-------------------------------------------------------------------------------------------------------------

#PF-Assgn-20

def calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):
    eligible_loan_amount=0
    bank_emi_expected=0
    eligible_loan_amount=0
    if(account_number<1000 or account_number>1999):
        print("Invalid account number")
    elif(account_balance<100000):
        print("Insufficient account balance")
    elif(loan_type!="Car" and loan_type!="House" and loan_type!="Business"):
            print("Invalid loan type or salary")
    elif(loan_type=="Car"):
        if(salary<=25000):
            print("Invalid loan type or salary")
        elif(customer_emi_expected>36 or loan_amount_expected>500000):
            print("The customer is not eligible for the loan")
        else:
            eligible_loan_amount=500000
            bank_emi_expected=36
            print("Account number:", account_number)
            print("The customer can avail the amount of Rs.", eligible_loan_amount)
            print("Eligible EMIs :", bank_emi_expected)
            print("Requested loan amount:", loan_amount_expected)
            print("Requested EMI's:",customer_emi_expected)
    elif(loan_type=="House"):
        if(salary<=50000):
            print("Invalid loan type or salary")
        elif(customer_emi_expected>60 or loan_amount_expected>6000000):
            print("The customer is not eligible for the loan")
        else:
            eligible_loan_amount=6000000
            bank_emi_expected=60
            print("Account number:", account_number)
            print("The customer can avail the amount of Rs.", eligible_loan_amount)
            print("Eligible EMIs :", bank_emi_expected)
            print("Requested loan amount:", loan_amount_expected)
            print("Requested EMI's:",customer_emi_expected)
    elif(loan_type=="Business"):
        if(salary<=75000):
            print("Invalid loan type or salary")
        elif(customer_emi_expected>84 or loan_amount_expected>7500000):
            print("The customer is not eligible for the loan") 
        else:
            eligible_loan_amount=7500000
            bank_emi_expected=84
            print("Account number:", account_number)
            print("The customer can avail the amount of Rs.", eligible_loan_amount)
            print("Eligible EMIs :", bank_emi_expected)
            print("Requested loan amount:", loan_amount_expected)
            print("Requested EMI's:",customer_emi_expected)
        
#Test your code for different values and observe the results
calculate_loan(1005,25000,250000,"Car",300000,30)



-----------------------------------------------------------------------------------------------

#PF-21


def generate_next_date(day,month,year):
    #Start writing your code here
    if (year % 400 == 0):
        leap_year = True
    elif (year % 100 == 0):
        leap_year = False
    elif (year % 4 == 0):
        leap_year = True
    else:
        leap_year = False
    if month in (1, 3, 5, 7, 8, 10, 12):
        month_length = 31
    elif month == 2:
        if leap_year:
            month_length = 29
        else:
            month_length = 28
    else:
        month_length = 30
    if day < month_length:
        next_day=day + 1
        next_month=month
        next_year=year
    else:
        next_day = 1
        if month == 12:
            next_month = 1
            next_year=year + 1
        else:
            next_month=month + 1
    print(next_day,"-",next_month,"-",next_year)


generate_next_date(23,9,2015)
