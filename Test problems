1.Write a python function to add 'ing' at the end of a given string and return the new string. 
If the given string already ends with 'ing' then add 'ly'. If the length of the given string is less than 3,
leave it unchanged.



def add_string(str1):
  if(len(str1)>=3):
        if(str1.endswith("ing")):
            str1=str1+"ly"
        else:
            str1=str1+"ing"
  
  return str1

str1=input(str())
print(add_string(str1))


------------------------------------------------------------------------------------------------------------------------

2.        Replace each value in a list with twice the preceding value (and the first value with 0)

Sample Input 0

1 2 3
Sample Output 0

0 2 4


number=list(map(int,input().split()))
print(0,end=" ")
for i in range(1,len(number)):
    print(number[i-1]*2,end=" ")

----------------------------------------------------------------------------------------------------------------------------

3.  Write a function build_index_grid(rows, columns) that, given a number of rows and columns, creates a list of lists of that shape that includes the 'row,column' of that location.

For example, after the following code is executed: new_index_grid = build_index_grid(4,3) new_index_grid would contain: [['0,0', '0,1', '0,2'], ['1,0', '1,1', '1,2'], ['2,0', '2,1', '2,2'], ['3,0', '3,1', '3,2']] Note that these are strings.

Sample Input 0

4 3
Sample Output 0

[['0,0', '0,1', '0,2'],
['1,0', '1,1', '1,2'],
['2,0', '2,1', '2,2'],
['3,0', '3,1', '3,2']]




r,c=map(int,input().split())
l=[]
for i in range(0,r):
    n=[]
    for j in range(0,c):
        temp=str(i)+','+str(j)
        n.append(temp)
    l.append(n)
print("[",end="")
print(*l,sep=',\n',end="")
print("]")

-----------------------------------------------------------------------------------------------------------------------------------

4.      Write a python function to create and return a new dictionary from the given dictionary(item:price). Given the following input, create a new dictionary with elements having price more than 200.

prices = {'ACME': 45.23,'AAPL': 612.78, 'IBM': 205.55,'HPQ': 37.20,'FB': 10.75}

Input Format

string

Constraints

n

Output Format

dictionary

Sample Input 0

{ 'ACME': 45.23,'AAPL': 612.78, 'IBM': 205.55,'HPQ': 37.20,'FB': 10.75}
Sample Output 0

{'AAPL': 612.78, 'IBM': 205.55}





import ast
def create_new_dictionary(prices):
    n=ast.literal_eval(prices)
    new_dict={}
    for key,value in n.items():
        if value> 200.0:
            new_dict[key]=value
    sorted_d= sorted(new_dict.items())
   
    return dict(sorted_d)
prices=input()
print(create_new_dictionary(prices))


-----------------------------------------------------------------------------------------------------------------------------

5.  Balanced Brackets

Sample Input

3
{[()]}
{[(])}
{{[[(())]]}}
Sample Output

YES
NO
YES



def valid(l,r):
    if(l=='(' and r==')'):
       return True 
    if(l=='{' and r=='}'):
       return True 
    if(l=='['and r==']'):
       return True 
    return False
def nest(S):
        stack=[] 
        for sym in S:
            if (sym=='[' or sym=='{' or sym=='('):
                stack.append(sym) 
            else:
                if len(stack)==0:
                    return False
                last=stack.pop()
                if not valid(last,sym):
                    return False
        if (len(stack)!=0):
            return False
        return True
N=int(input())
for i in range(0,N):
    s=input()
    if nest(s):
        print("YES")
    else:
        print("NO")
        
 
------------------------******************************----------------------------------------------------------********************************-----------------------------------------------------------**********************************-------------------------------------------------------
