#PF-Exer-15

def find_sum_of_digits(number):
    sum_of_digits=0
    #Write your logic here
    while number!=0:
        rem=number%10
        sum_of_digits=sum_of_digits+rem
        number=number//10
    return sum_of_digits

#Provide different values for number and test your program
sum_of_digits=find_sum_of_digits(123)
print("Sum of digits:",sum_of_digits)


-------------------------------------------------------------------------------------------------


#PF-Exer-18

def get_count(num_list):
    count=0

    for i in range(0,len(num_list)-1):
        if(num_list[i]==num_list[i+1]):
            count=count+1

    return count

#provide different values in list and test your program
num_list=[1,1,5,100,-20,-20,6,0,0]
print(get_count(num_list))


---------------------------------------------------------------------------------------------------------


Write a python function to check whether three given numbers can form the sides of a triangle. 
Hint: Three numbers can be the sides of a triangle if none of the numbers are greater than or equal to the sum of the other two numbers.

Also write the pytest test cases to test the program.




#PF-Assgn-24
def form_triangle(num1,num2,num3):
    #Do not change the messages provided below
    success="Triangle can be formed"
    failure="Triangle can't be formed"

    if(num1+num2>num3 and num3+num1>num2 and num2+num3>num1):

    #Use the following messages to return the result wherever necessary
        return success
    return failure

#Provide different values for the variables, num1, num2, num3 and test your program
num1=3
num2=3
num3=5
form_triangle(num1, num2, num3)


------------------------------------------------------------------------------------------------------------


#PF-Assgn-28

def find_max(num1, num2):
    max_num=-1
    l=[]
    c=0
    # Write your logic here
    for i in range(num1,num2+1):
        if(i%5==0 and num1<num2):
            if(i<100 and i>=10):
                t=i
                s=0
                while(i!=0 and i!=10):
                    r=i%10
                    s=s+r
                    i=i//10
                    if(s%3==0):
                        l.append(t)
                        c+=1
    if(c!=0):
        max_num=max(l)
    return max_num

#Provide different values for num1 and num2 and test your program.
max_num=find_max(2,14)
print(max_num)
                                          
                                          
