#PF-Exer-15

def find_sum_of_digits(number):
    sum_of_digits=0
    #Write your logic here
    while number!=0:
        rem=number%10
        sum_of_digits=sum_of_digits+rem
        number=number//10
    return sum_of_digits

#Provide different values for number and test your program
sum_of_digits=find_sum_of_digits(123)
print("Sum of digits:",sum_of_digits)


-------------------------------------------------------------------------------------------------


#PF-Exer-18

def get_count(num_list):
    count=0

    for i in range(0,len(num_list)-1):
        if(num_list[i]==num_list[i+1]):
            count=count+1

    return count

#provide different values in list and test your program
num_list=[1,1,5,100,-20,-20,6,0,0]
print(get_count(num_list))


---------------------------------------------------------------------------------------------------------




Write a Python program to generate the next 15 leap years starting from a given year. Populate the leap years into a list and display the list. 
Also write the pytest test cases to test the program.

Note: One pytest case is given for your reference.





#PF-Assgn-22


def find_leap_years(given_year):

    c=0
    list_of_leap_years=[]
    while(c<15):
        if((given_year%4==0 and given_year%100!=0) or given_year%400==0):
            list_of_leap_years.append(given_year)
            c+=1
        given_year+=1
            
    return list_of_leap_years

list_of_leap_years=find_leap_years(2000)
print(list_of_leap_years)



-----------------------------------------------------------------------------------------------------------



ARS Gems Store sells different varieties of gems to its customers.

Write a Python program to calculate the bill amount to be paid by a customer based on the list of gems and quantity purchased. Any purchase with a total bill amount above Rs.30000 is entitled for 5% discount. If any gem required by the customer is not available in the store, then consider total bill amount to be -1.

Assume that quantity required by the customer for any gem will always be greater than 0.

Perform case-sensitive comparison wherever applicable.







#PF-Assgn-23
def calculate_bill_amount(gems_list, price_list, reqd_gems,reqd_quantity):
    bill_amount=0
    c=0
    for i in range(0,len(reqd_gems)):
        for j in range(0,len(gems_list)):
            if(reqd_gems[i]==gems_list[j]):
                bill_amount=(reqd_quantity[i]*price_list[j])+bill_amount
                c+=1
    if(bill_amount>30000):
        bill_amount=bill_amount-(bill_amount*5/100)
    if(c!=len(reqd_gems)):
        bill_amount=-1

    return bill_amount

#List of gems available in the store
gems_list=["Emerald","Ivory","Jasper","Ruby","Garnet"]
l
#Price of gems avaiable in the store. gems_list and price_list have one-to-one correspondence
price_list=[1760,2119,1599,3920,3999]

#List of gems required by the customer
reqd_gems=["Ivory","Emerald","Garnet"]

#Quantity of gems required by the customer. reqd_gems and reqd_quantity have one-to-one correspondence
reqd_quantity=[3,10,12]

bill_amount=calculate_bill_amount(gems_list, price_list, reqd_gems, reqd_quantity)
print(bill_amount)



------------------------------------------------------------------------------------------------------------



Write a python function to check whether three given numbers can form the sides of a triangle. 
Hint: Three numbers can be the sides of a triangle if none of the numbers are greater than or equal to the sum of the other two numbers.

Also write the pytest test cases to test the program.




#PF-Assgn-24
def form_triangle(num1,num2,num3):
    #Do not change the messages provided below
    success="Triangle can be formed"
    failure="Triangle can't be formed"

    if(num1+num2>num3 and num3+num1>num2 and num2+num3>num1):

    #Use the following messages to return the result wherever necessary
        return success
    return failure

#Provide different values for the variables, num1, num2, num3 and test your program
num1=3
num2=3
num3=5
form_triangle(num1, num2, num3)


------------------------------------------------------------------------------------------------------------


#PF-Assgn-28

def find_max(num1, num2):
    max_num=-1
    l=[]
    c=0
    # Write your logic here
    for i in range(num1,num2+1):
        if(i%5==0 and num1<num2):
            if(i<100 and i>=10):
                t=i
                s=0
                while(i!=0 and i!=10):
                    r=i%10
                    s=s+r
                    i=i//10
                    if(s%3==0):
                        l.append(t)
                        c+=1
    if(c!=0):
        max_num=max(l)
    return max_num

#Provide different values for num1 and num2 and test your program.
max_num=find_max(2,14)
print(max_num)
                                          
                                          
