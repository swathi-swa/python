#PF-Exer-38
#This verification is based on string match.

num1=36
num2=10
num3=4

calc = lambda num1,num2:(num1%num2)+(num1-num2)
print(calc(num1,num2))

square_root = lambda num3:math.sqrt(num3)
print(square_root(num3))

square_root2= lambda num3:math.sqrt(num3)
print(square_root2(num3))

====================================================================================================================

# your code goes here
#PF-Exer-39
#This verification is based on string match.

principal_amount=20
duration=10
rate_of_interest=10

simple_interest = lambda x,y,z:(x*y*z)/100

    

if(simple_interest(principal_amount,duration,rate_of_interest)>1000):
    print("Platinum Member")
else:
    print("Gold Member")


============================================================================================================================

# your code goes here
#PF-Exer-40
#This verification is based on string match.

num1=10
num2=15

div = lambda x,y:x+y

if(div(num1,num2)%10)==0:
    print("Divisible by 10")
else:
    print("Not Divisible by 10")
    
========================================================================================================================

#PF-Exer-41
#This verification is based on string match.

def sum_all(function, data):
    sum=0
    for i in list_of_nos:
        if(function(i)==1):
            sum+=i
    return sum


list_of_nos=[25,26,27,28,29,30,147,187]

greater = lambda s:s>10

divide = lambda x:x%10==0 and x<100

range_of_values = lambda x:x>=25 and x<=50

#Use the below given print statements to display the output
# Also, do not modify them for verification to work
print(sum_all(greater,list_of_nos))
print(sum_all(divide,list_of_nos))
print(sum_all(range_of_values,list_of_nos))

====================================================================================================================

#PF-Assgn-53

import re
poem='''
It takes strength for being certain,
It takes courage to have doubt.
It takes strength for challenging alone,
It takes courage to lean on another.
It takes strength for loving other souls,
It takes courage to be loved.
It takes strength for hiding our own pain,
It takes courage to help if it is paining for someone.
'''
print(poem.count("v"))
print()
k=poem
k="\n"+k
print(k)
print(k.replace("\n",""))
c=poem.replace("co","Co")
c=c.replace("ch","Ch")
print(c)
poem=re.sub(r"ai...",r"ai*\*",poem)
poem=re.sub(r"hi...",r"hi*\*",poem)
print(poem)

==========================================================================================================

#PF-Assgn-54

def check_anagram(data1,data2):
    data2=data2.lower()
    data1=data1.lower()
    c=0
    l=[]
    s=""
    if(len(data2)==len(data1)):
        for i in range(0,len(data1)):
            for j in range(0,len(data2)):
                if(data2[j]==data1[i] and i!=j and not(j in l)):
                    l.append(j)
                    c+=1
                    break
    if(c==len(data2)):
        return True
    else:
        return False
    
print(check_anagram("resell","lleser"))

=============================================================================================================

#PF-Prac-1
def add_string(str1):
  #start writing your code here
  if(len(str1)>=3):
        if(str1.endswith("ing")):
            str1=str1+"ly"
        else:
            str1=str1+"ing"
  
  return str1

str1="com"
print(add_string(str1))

======================================================================================================================
